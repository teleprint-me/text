"""
text_extraction/cli/json.py

A script for formatting conversational data into plaintext format for building language model vocabularies.
"""

import json
from typing import Any, Dict, List


def read(input_file: str) -> List[Dict[str, str]]:
    """Read the JSON source file into memory for further processing."""

    try:
        with open(input_file, "r") as file:
            # just return data because there's nothing else to do
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        raise FileNotFoundError(f"Failed to read or parse {input_file}")


def write(output_file: str, data: List[Dict[str, str]]) -> None:
    """Write the plaintext formatted output to a file."""

    try:
        with open(output_file, "w") as file:
            plaintext = ""
            for role, content in data.items():
                plaintext += f"{role}\n{content}\n"
            file.write(plaintext)
            print(f"Output written to {output_file}")
    except TypeError:
        raise TypeError(f"Failed to write {output_file}")


def is_conversational_format(data: List[Dict[str, str]]) -> bool:
    """Validate the conversational format of the provided data."""

    if not isinstance(data, list):
        raise TypeError("Input must be a list")

    for entry in data:
        if not isinstance(entry, dict) or not all(
            isinstance(k, str) and isinstance(v, str) for k, v in entry.items()
        ):
            raise TypeError(
                "Each entry in the input list must be a dictionary with two string keys 'role' and 'content'"
            )


# NOTE: This is a lazy evaluation because there's no way to guarantee that it's a JSON file generated by OpenAI unless they implement a special key for doing so.
def is_openai_format(data: List[Dict[str, Any]]) -> bool:
    if not isinstance(data, list):
        raise TypeError("Data must be a list")

    if not isinstance(data[0], dict):
        raise TypeError("Data element must be a dictionary")

    # get an element from the list
    element = data[0]
    # dictionary should have an "id" and "mapping"
    if "id" not in element or "mapping" not in element:
        return False  # There are no "id" and/or "mapping" keys

    # get a key from the mapping. we only need one.
    key = element["mapping"].keys()[0]
    # split key uuid into parts
    key_parts = key.split("-")
    # uuids have 5 parts and each part is alphanumeric
    if 5 != key_parts or not key_parts[0].isalnum():
        return False  # It's not a UUID

    return True


def format_openai_conversation(data: List[Dict[str, Any]]) -> List[Dict[str, str]]:
    """Convert the custom OpenAI conversational format to a portable format"""
    pass


def main() -> None:
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input-file", type=str, help="The input file to format")
    parser.add_argument(
        "-o", "--output-file", type=str, help="The formatted output file"
    )
    args = parser.parse_args()

    data = read(args.input_file)
    write(args.output_file, data)


if __name__ == "__main__":
    main()
